/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import Model.Bookcategory;
import Model.Operation;
import com.itextpdf.text.Document;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import java.io.BufferedOutputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
//import javax.swing.text.Document;
import org.apache.poi.hwpf.usermodel.Paragraph;
import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.hibernate.Criteria;
import org.hibernate.SQLQuery;
import org.hibernate.Session;
import org.hibernate.Transaction;
import org.hibernate.criterion.Criterion;
import org.hibernate.criterion.DetachedCriteria;
import org.hibernate.criterion.Projections;
import org.hibernate.criterion.Restrictions;
import utility.NewHibernateUtil;

/**
 *
 * @author Lionel
 */
public class Reports extends javax.swing.JFrame {

    /**
     * Creates new form Reports
     */
    public Reports() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jPanel3 = new javax.swing.JPanel();
        cin = new javax.swing.JRadioButton();
        cout = new javax.swing.JRadioButton();
        jLabel1 = new javax.swing.JLabel();
        fbooks = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        fdate = new com.toedter.calendar.JDateChooser();
        jLabel3 = new javax.swing.JLabel();
        todate = new com.toedter.calendar.JDateChooser();
        btnsearch = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        rtable = new javax.swing.JTable();
        btnprint = new javax.swing.JButton();
        btnpdf = new javax.swing.JButton();
        btnexcel = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        buttonGroup1.add(cin);
        cin.setText("Check In");

        buttonGroup1.add(cout);
        cout.setText("Check Out");

        jLabel1.setText("Search Book");

        fbooks.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                fbooksMousePressed(evt);
            }
        });

        jLabel2.setText("From");

        jLabel3.setText("To");

        btnsearch.setText("Search");
        btnsearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnsearchActionPerformed(evt);
            }
        });

        rtable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Option", "BookTitle", "From", "To"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane2.setViewportView(rtable);

        btnprint.setText("Print");
        btnprint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnprintActionPerformed(evt);
            }
        });

        btnpdf.setText("Export PDF");
        btnpdf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnpdfActionPerformed(evt);
            }
        });

        btnexcel.setText("Export Excel");
        btnexcel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnexcelActionPerformed(evt);
            }
        });

        jButton5.setText("Exit");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 765, Short.MAX_VALUE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(cin, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(cout, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(fbooks, javax.swing.GroupLayout.PREFERRED_SIZE, 293, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(fdate, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(todate, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(btnprint, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(121, 121, 121)
                        .addComponent(btnpdf, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(159, 159, 159)
                        .addComponent(btnexcel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(211, 211, 211)
                .addComponent(btnsearch, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cin)
                    .addComponent(cout))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fbooks, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(fdate, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(todate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(btnsearch, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 254, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnprint, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnpdf, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnexcel, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(45, 45, 45))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 811, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addContainerGap(13, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(13, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 573, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addContainerGap()))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnsearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnsearchActionPerformed
        // TODO add your handling code here:
        String stat=null; 
        Transaction tr = null;
       Session session = NewHibernateUtil.getSessionFactory().openSession();
       tr= session.beginTransaction();
        if(cin.isSelected())
        {
           stat="Check in";
           Criteria cr = session.createCriteria(Operation.class);
            cr.add(Restrictions.eq("status", stat));
           List res = cr.list();
   
       DefaultTableModel md = (DefaultTableModel) rtable.getModel();
       md.setRowCount(0);
      Object[] row =new Object [5];
    for(Iterator i=res.iterator();i.hasNext();)
    {
        Operation opc= (Operation) i.next();
        row[0]=opc.getClientId();
        row[1]=opc.getBookName();
        row[2]=opc.getAuthor();
        row[3]=opc.getStatus();
        row[4]=opc.getReturnDate();
        md.addRow(row);
         
    }
    session.close();
        }
        else if (cout.isSelected())
        {
            stat="Check out";
             session = NewHibernateUtil.getSessionFactory().openSession();
             tr= session.beginTransaction();
           Criteria crOut = session.createCriteria(Operation.class);
           crOut.add(Restrictions.eq("status", stat));
           List res = crOut.list();
   
       DefaultTableModel mdOut = (DefaultTableModel) rtable.getModel();
       mdOut.setRowCount(0);
      Object[] rows =new Object [5];
      for(Iterator j=res.iterator();j.hasNext();)
      {
        Operation op= (Operation) j.next();
        rows[0]=op.getClientId();
        rows[1]=op.getBookName();
        rows[2]=op.getAuthor();
        rows[3]=op.getStatus();
        rows[4]=op.getReturnDate();
        mdOut.addRow(rows);
         
      } 
      session.close();
        }
        else if(fdate.getDate()==null)
            
        {
            String id=null;
            int i=0;
            String rnm=null;
            String nm = fbooks.getSelectedItem().toString();
           session = NewHibernateUtil.getSessionFactory().openSession();
             tr= session.beginTransaction();
            Criteria Bct = session.createCriteria(Bookcategory.class);
            SQLQuery query = session.createSQLQuery("select CategoryId from bookcategory where CategoryName=?");
            query.setParameter(0, nm);
            List temp = query.list();
            for(Object obj: temp)
            {
                id=obj.toString();
            }
            i =Integer.parseInt(id);
            SQLQuery query2 = session.createSQLQuery("select CategoryName from bookcategory where CategoryId =?");
            query2.setParameter(0, i);
            List temp2 = query.list();
            for(Object obj: temp2)
            {
                rnm=obj.toString();
            }
             Criteria crOut = session.createCriteria(Operation.class);
            crOut.add(Restrictions.ge("bookName", rnm));
            List temp3 = crOut.list();
             DefaultTableModel mdOut = (DefaultTableModel) rtable.getModel();
            mdOut.setRowCount(0);
            Object[] rows =new Object [5];
             for(Iterator j=temp3.iterator();j.hasNext();)
                {
                     Operation op= (Operation) j.next();
                    rows[0]=op.getClientId();
                     rows[1]=op.getBookName();
                         rows[2]=op.getAuthor();
                     rows[3]=op.getStatus();
                         rows[4]=op.getReturnDate();
                        mdOut.addRow(rows);
         
                    }
        }
        else
        {
            Date fdt = fdate.getDate();
            Date tdt= todate.getDate();
            session = NewHibernateUtil.getSessionFactory().openSession();
             tr= session.beginTransaction();
            Criteria crOut = session.createCriteria(Operation.class);
            crOut.add(Restrictions.ge("returnDate", fdt));
            crOut.add(Restrictions.le("returnDate", tdt));
            List res = crOut.list();
            DefaultTableModel mdOut = (DefaultTableModel) rtable.getModel();
       mdOut.setRowCount(0);
      Object[] rows =new Object [5];
      for(Iterator j=res.iterator();j.hasNext();)
      {
        Operation op= (Operation) j.next();
        rows[0]=op.getClientId();
        rows[1]=op.getBookName();
        rows[2]=op.getAuthor();
        rows[3]=op.getStatus();
        rows[4]=op.getReturnDate();
        mdOut.addRow(rows);
         
      } 
      session.close();
        }
    }//GEN-LAST:event_btnsearchActionPerformed

    private void btnprintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnprintActionPerformed
        // TODO add your handling code here:
         try{
            rtable.print(JTable.PrintMode.NORMAL);
            
        }catch(Exception e)
        {
            
        }
    }//GEN-LAST:event_btnprintActionPerformed

    private void btnpdfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnpdfActionPerformed
        // TODO add your handling code here:
        DefaultTableModel mdOut = (DefaultTableModel) rtable.getModel();
        Paragraph p=null;
         try{
             PdfPTable tb= new PdfPTable(5);
             PdfPCell c1 = new  PdfPCell(new Phrase("Client ID"));
             tb.addCell(c1);
              c1 = new  PdfPCell(new Phrase("Book Name"));
             tb.addCell(c1);
             c1 = new  PdfPCell(new Phrase("Author"));
             tb.addCell(c1);
              c1 = new  PdfPCell(new Phrase("Status"));
             tb.addCell(c1);
             c1 = new  PdfPCell(new Phrase("Return date"));
             tb.addCell(c1);
             tb.setHeaderRows(1);
             
            String file ="C:\\Users\\USER\\Desktop\\Hibernate\\report.pdf" ;
            Document doc = new Document();
            PdfWriter.getInstance(doc, new FileOutputStream(file));
            doc.open();
            for(int i=0; i<mdOut.getRowCount();i++)
          {
              
              for(int j=0;j<mdOut.getColumnCount();j++)
              {
                 tb.addCell(mdOut.getValueAt(i, j).toString()+"\t");
                 
                
                 
                 
              }
          
          }
            doc.add(tb);
            doc.close();
            JOptionPane.showMessageDialog(null, "PDF created");
        }catch(Exception e)
        {
            
        }
    }//GEN-LAST:event_btnpdfActionPerformed

    private void fbooksMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fbooksMousePressed
        // TODO add your handling code here:
        fbooks.removeAllItems();
        Transaction tr = null;
       Session session = NewHibernateUtil.getSessionFactory().openSession();
       tr= session.beginTransaction();
       SQLQuery query = session.createSQLQuery("select CategoryName from bookcategory");
       List rs = query.list();
       for(Object cat : rs)
       {
          fbooks.addItem(cat);
       }
    }//GEN-LAST:event_fbooksMousePressed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        Reports v = new Reports();
        this.setVisible(false);
    }//GEN-LAST:event_jButton5ActionPerformed

    private void btnexcelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnexcelActionPerformed
        // TODO add your handling code here:
         FileOutputStream excelFout =null;
            BufferedOutputStream excelBout = null;
            XSSFWorkbook excelJTableExporter=null;
        JFileChooser excelFileChooser= new JFileChooser();
        excelFileChooser.setDialogTitle("Save As");
        FileNameExtensionFilter fnef= new FileNameExtensionFilter("EXCEL FILES","xls","xlsx","xlsm");
        excelFileChooser.setFileFilter(fnef);
        excelFileChooser.showSaveDialog(null);
        int excelChooser = excelFileChooser.showSaveDialog(null);
        if(excelChooser == JFileChooser.APPROVE_OPTION){
            
            try { 
                 excelJTableExporter =new XSSFWorkbook();
                XSSFSheet excelSheet =excelJTableExporter.createSheet("JTable Sheet");
                for(int i =0; i<rtable.getRowCount();i++){
                    XSSFRow excelRow = excelSheet.createRow(i);
                    for( int j =0; j<rtable.getColumnCount();j++){
                        XSSFCell excelCell = excelRow.createCell(j);
                        excelCell.setCellValue(rtable.getValueAt(i, j).toString());
                    }
                }   
                excelFout = new FileOutputStream(excelFileChooser.getSelectedFile() + ".xlsx");
                excelBout = new BufferedOutputStream(excelFout);
                excelJTableExporter.write(excelBout);
                JOptionPane.showMessageDialog(null, "Done!!");
            } catch (FileNotFoundException ex) {
                ex.printStackTrace();
            } catch (IOException ex) {
                Logger.getLogger(Operation.class.getName()).log(Level.SEVERE, null, ex);
            } finally {
                try {
                    if (excelBout!=null) {
                        excelBout.close();
                    }
                     
                    if (excelFout!=null) {
                        excelFout.close();
                    }
                    
                    if (excelJTableExporter!=null) {
                        excelJTableExporter.close();
                    } 
                    
                } catch (IOException ex) {
                    ex.printStackTrace();
                }
            }
            
        }
    }//GEN-LAST:event_btnexcelActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Reports.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Reports.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Reports.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Reports.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Reports().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnexcel;
    private javax.swing.JButton btnpdf;
    private javax.swing.JButton btnprint;
    private javax.swing.JButton btnsearch;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JRadioButton cin;
    private javax.swing.JRadioButton cout;
    private javax.swing.JComboBox fbooks;
    private com.toedter.calendar.JDateChooser fdate;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable rtable;
    private com.toedter.calendar.JDateChooser todate;
    // End of variables declaration//GEN-END:variables
}
